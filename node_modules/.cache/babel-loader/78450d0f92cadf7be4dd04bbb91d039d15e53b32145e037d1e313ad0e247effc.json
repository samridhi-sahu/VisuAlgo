{"ast":null,"code":"export const insertionSort = state => {\n  console.log(\"insertion sort called\");\n  const arr = state.map(objArr => objArr);\n  const history = [];\n\n  // push initial state\n  history.push(arr.map(a => {\n    return {\n      ...a\n    };\n  }));\n  for (let i = 1; i < arr.length; i++) {\n    // make white compare \n    let j = i;\n    while (j > 0) {\n      // compare\n      arr[j].color = \"white\";\n      arr[j - 1].color = \"white\";\n      history.push(arr.map(a => {\n        return {\n          ...a\n        };\n      }));\n      if (arr[j].value < arr[j - 1].value) {\n        // red\n        arr[j].color = \"#DC143C\";\n        arr[j - 1].color = \"#DC143C\";\n        history.push(arr.map(a => {\n          return {\n            ...a\n          };\n        }));\n        // now swap\n        let temp = arr[j];\n        arr[j] = arr[j - 1];\n        arr[j - 1] = temp;\n      } else {\n        // green\n        arr[j].color = \"#32CD32\";\n        arr[j - 1].color = \"#32CD32\";\n        history.push(arr.map(a => {\n          return {\n            ...a\n          };\n        }));\n      }\n\n      // make it blue\n      arr[j].color = \"#293451\";\n      arr[j - 1].color = \"#293451\";\n      history.push(arr.map(a => {\n        return {\n          ...a\n        };\n      }));\n      j--;\n    }\n  }\n\n  /*  Evert thing done just show 2nd last step as green and last step as default color  */\n\n  // push sorted aray with all green color\n  history.push(arr.map(a => {\n    return {\n      ...a,\n      color: \"#32CD32\"\n    };\n  }));\n  // push with default color\n  history.push(arr.map(a => {\n    return {\n      ...a\n    };\n  }));\n  return history;\n};","map":{"version":3,"names":["insertionSort","state","console","log","arr","map","objArr","history","push","a","i","length","j","color","value","temp"],"sources":["C:/Users/SAMRIDHI SAHU/AppData/Roaming/nvm/v18.16.0/algorithm-visualizer/src/Algorithms/insertion-sort.js"],"sourcesContent":["\r\nexport const insertionSort = (state)=>{\r\n    console.log(\"insertion sort called\");\r\n  const arr = state.map((objArr)=> objArr );\r\n  const history =[];\r\n\r\n  // push initial state\r\n  history.push(\r\n       arr.map((a)=>{\r\n          return {...a};\r\n       } )\r\n  )\r\n\r\n  for (let i=1 ; i<arr.length; i++){\r\n      // make white compare \r\n    let j= i;  \r\n    \r\n\r\n    \r\n    while(j>0){\r\n        // compare\r\n        arr[j].color = \"white\";\r\n        arr[j-1].color = \"white\";\r\n\r\n        history.push(\r\n        arr.map((a)=>{\r\n            return {...a};\r\n            } )\r\n        )  \r\n\r\n\r\n        if(arr[j].value < arr[j-1].value){\r\n            // red\r\n            arr[j].color = \"#DC143C\";\r\n            arr[j-1].color = \"#DC143C\";\r\n\r\n            history.push(\r\n                arr.map((a)=>{\r\n                return {...a};\r\n                } )\r\n            )\r\n            // now swap\r\n            let temp = arr[j] ;\r\n            arr[j] = arr[j-1];\r\n            arr[j-1] =temp;\r\n\r\n\r\n        }else{\r\n            // green\r\n            arr[j].color = \"#32CD32\";\r\n            arr[j-1].color = \"#32CD32\";\r\n\r\n            history.push(\r\n                arr.map((a)=>{\r\n                return {...a};\r\n                } )\r\n            )\r\n        }\r\n\r\n        // make it blue\r\n        arr[j].color = \"#293451\";\r\n        arr[j-1].color = \"#293451\";\r\n\r\n        history.push(\r\n                arr.map((a)=>{\r\n                return {...a};\r\n                } )\r\n        );\r\n        j--;\r\n        }\r\n    }\r\n\r\n\r\n    /*  Evert thing done just show 2nd last step as green and last step as default color  */\r\n\r\n\r\n    // push sorted aray with all green color\r\n     history.push(\r\n       arr.map((a)=>{\r\n          return {...a, color : \"#32CD32\"};\r\n       } )\r\n  )\r\n   // push with default color\r\n   history.push(\r\n       arr.map((a)=>{\r\n          return {...a};\r\n       } )\r\n  )\r\n\r\n  return history;\r\n}"],"mappings":"AACA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAG;EAClCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC,MAAMC,GAAG,GAAGH,KAAK,CAACI,GAAG,CAAEC,MAAM,IAAIA,MAAO,CAAC;EACzC,MAAMC,OAAO,GAAE,EAAE;;EAEjB;EACAA,OAAO,CAACC,IAAI,CACPJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;IACV,OAAO;MAAC,GAAGA;IAAC,CAAC;EAChB,CAAE,CACP,CAAC;EAED,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAGA,CAAC,GAACN,GAAG,CAACO,MAAM,EAAED,CAAC,EAAE,EAAC;IAC7B;IACF,IAAIE,CAAC,GAAEF,CAAC;IAIR,OAAME,CAAC,GAAC,CAAC,EAAC;MACN;MACAR,GAAG,CAACQ,CAAC,CAAC,CAACC,KAAK,GAAG,OAAO;MACtBT,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACC,KAAK,GAAG,OAAO;MAExBN,OAAO,CAACC,IAAI,CACZJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;QACT,OAAO;UAAC,GAAGA;QAAC,CAAC;MACb,CAAE,CACN,CAAC;MAGD,IAAGL,GAAG,CAACQ,CAAC,CAAC,CAACE,KAAK,GAAGV,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACE,KAAK,EAAC;QAC7B;QACAV,GAAG,CAACQ,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;QACxBT,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;QAE1BN,OAAO,CAACC,IAAI,CACRJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;UACb,OAAO;YAAC,GAAGA;UAAC,CAAC;QACb,CAAE,CACN,CAAC;QACD;QACA,IAAIM,IAAI,GAAGX,GAAG,CAACQ,CAAC,CAAC;QACjBR,GAAG,CAACQ,CAAC,CAAC,GAAGR,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC;QACjBR,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,GAAEG,IAAI;MAGlB,CAAC,MAAI;QACD;QACAX,GAAG,CAACQ,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;QACxBT,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;QAE1BN,OAAO,CAACC,IAAI,CACRJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;UACb,OAAO;YAAC,GAAGA;UAAC,CAAC;QACb,CAAE,CACN,CAAC;MACL;;MAEA;MACAL,GAAG,CAACQ,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;MACxBT,GAAG,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACC,KAAK,GAAG,SAAS;MAE1BN,OAAO,CAACC,IAAI,CACJJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;QACb,OAAO;UAAC,GAAGA;QAAC,CAAC;MACb,CAAE,CACV,CAAC;MACDG,CAAC,EAAE;IACH;EACJ;;EAGA;;EAGA;EACCL,OAAO,CAACC,IAAI,CACVJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;IACV,OAAO;MAAC,GAAGA,CAAC;MAAEI,KAAK,EAAG;IAAS,CAAC;EACnC,CAAE,CACP,CAAC;EACA;EACAN,OAAO,CAACC,IAAI,CACRJ,GAAG,CAACC,GAAG,CAAEI,CAAC,IAAG;IACV,OAAO;MAAC,GAAGA;IAAC,CAAC;EAChB,CAAE,CACP,CAAC;EAED,OAAOF,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}